#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –•–æ–ª—Å—Ç–µ–¥–∞
(–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ CI)
"""

import math
import argparse
from dataclasses import dataclass
from typing import List, Tuple, Dict


# =============================
# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# =============================
@dataclass
class VariantData:
    targets: int
    measurements_per_param: int
    tracked_params: int
    calculated_params: int
    R0: float
    lambda_lang: float
    n_programs: int
    volumes_kb: List[float]
    errors_list: List[int]
    planned_kb: int


# –¢–∞–±–ª–∏—Ü—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∞—Ä–∏–∞–Ω—Ç 2 –∫–∞–∫ –≤ –¢–ó)
TABLE: Dict[int, VariantData] = {
    2: VariantData(
        targets=25,
        measurements_per_param=28,
        tracked_params=8,
        calculated_params=3,
        R0=2000,
        lambda_lang=1.6,
        n_programs=3,
        volumes_kb=[4, 8, 10],
        errors_list=[1, 2, 4],
        planned_kb=14
    )
}


# =============================
# –£—Ç–∏–ª–∏—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª—ã
# =============================

def log2(x: float) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 2."""
    if x <= 0:
        raise ValueError("log2: –≤—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
    return math.log(x, 2)


def compute_n2_star(data: VariantData) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ (n2*)."""
    return data.targets * (data.tracked_params + data.calculated_params)


def halstead_potential_volume(n2_star: int) -> float:
    """–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø–æ –•–æ–ª—Å—Ç–µ–¥—É: V* = (2 + n2*) * log2(2 + n2*)."""
    return (2 + n2_star) * log2(2 + n2_star)


def modules_count(n2_star: int) -> Tuple[float, int]:
    """–ß–∏—Å–ª–æ –º–æ–¥—É–ª–µ–π: k_raw (–¥—Ä–æ–±–Ω–æ–µ), k (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –≤–≤–µ—Ä—Ö)."""
    k_raw = n2_star / 8.0
    return k_raw, math.ceil(k_raw)


def program_length(K: int, Nk: float = 220.0) -> float:
    """
    –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã N = K * (Nk + 20 * log2(K))
    (–≤ –º–µ—Ç–æ–¥–∏—á–∫–µ –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ç–∏–ø–∞ 20 –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–µ)
    """
    if K <= 0:
        raise ValueError("K –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0 –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    return K * (Nk + 20.0 * log2(K))


def asm_commands(N: float) -> float:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞: P = 3/8 * N."""
    if N < 0:
        raise ValueError("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0")
    return (3.0 / 8.0) * N


def calendar_time_days(P_asm: float, nu: int, m: int) -> float:
    """–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¥–Ω–∏): T_k = P / (ŒΩ * m)."""
    if nu <= 0 or m <= 0:
        raise ValueError("nu –∏ m –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0")
    return P_asm / (nu * m)


def potential_errors_task1(V_star: float, lambda_lang: float) -> float:
    """–ó–∞–¥–∞–Ω–∏–µ 1(–≤): B = (V*)^2 / (3000 ¬∑ Œª)."""
    if lambda_lang <= 0:
        raise ValueError("lambda_lang –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
    return (V_star * V_star) / (3000.0 * lambda_lang)


def potential_errors_task2(V: float) -> float:
    """–ó–∞–¥–∞–Ω–∏–µ 2(–µ): B = V / 3000."""
    return V / 3000.0


def c_coef(variant: int, lambd: float, R: float) -> float:
    """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c(Œª, R) –¥–ª—è –ó–∞–¥–∞–Ω–∏—è 3 (—Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞)."""
    if lambd <= 0 or R <= 0:
        raise ValueError("lambda –∏ R –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ c")
    if variant == 1:
        return 1.0 / (lambd + R)
    if variant == 2:
        return 1.0 / (lambd * R)
    if variant == 3:
        return (1.0 / lambd) + (1.0 / R)
    raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ c")


def compute_rating_and_expected_errors(data: VariantData, coef_variant: int, R_prev: float) -> Tuple[float, float]:
    """
    –ó–∞–¥–∞–Ω–∏–µ 3:
    R_i = R_{i-1} * [1 + 1e-3 * (Œ£ V_j ‚àí Œ£ B_k / c(Œª, R_{i-1}))],
    B_{n+1} = c(Œª, R_i) * V_{n+1}, –≥–¥–µ V_{n+1} = planned_kb.
    """
    c_prev = c_coef(coef_variant, data.lambda_lang, R_prev)
    sum_V = sum(data.volumes_kb)
    # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ c_prev == 0, —ç—Ç–æ –¥–∞—Å—Ç –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0
    if c_prev == 0:
        raise ZeroDivisionError("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c_prev —Ä–∞–≤–µ–Ω 0, –¥–µ–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")

    sum_B_over_c = sum(Bk / c_prev for Bk in data.errors_list)
    R_new = R_prev * (1.0 + 1e-3 * (sum_V - sum_B_over_c))

    # üîπ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–ª–∏ –Ω—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è R_new
    if R_new <= 0:
        R_new = max(abs(R_new), 1e-6)

    c_new = c_coef(coef_variant, data.lambda_lang, R_new)
    B_expected_next = c_new * data.planned_kb

    return R_new, B_expected_next


# =============================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# =============================

def run_all_for_variant(data: VariantData, m: int, nu: int, work_day_hours: int) -> Dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if data.targets <= 0 or data.tracked_params < 0 or data.calculated_params < 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ü–µ–ª–∏/–æ–ø–µ—Ä–∞–Ω–¥–æ–≤")
    if work_day_hours <= 0:
        raise ValueError("–ß–∞—Å—ã –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0")
    if data.n_programs != len(data.volumes_kb) or data.n_programs != len(data.errors_list):
        raise ValueError("–î–ª–∏–Ω—ã volumes_kb –∏ errors_list –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å n_programs")

    n2_star = compute_n2_star(data)
    V_star = halstead_potential_volume(n2_star)

    # –ó–∞–¥–∞–Ω–∏–µ 1(–≤): –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫ –ø–æ V* –∏ Œª
    B1 = potential_errors_task1(V_star, data.lambda_lang)

    # –ó–∞–¥–∞–Ω–∏–µ 2(–∞): —á–∏—Å–ª–æ –º–æ–¥—É–ª–µ–π
    k_raw, k_simple = modules_count(n2_star)
    # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ø—Ä–∏ k_raw > 8: K ‚âà n2*/8 + n2*/8^2
    K_hier = math.ceil(n2_star / 8.0 + n2_star / (8.0 ** 2))
    K = K_hier if k_raw > 8.0 else k_simple

    # –ó–∞–¥–∞–Ω–∏–µ 2(–±): –¥–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    N = program_length(K)

    # –ó–∞–¥–∞–Ω–∏–µ 2(–≤): –æ–±—ä—ë–º –ü–û –ø–æ —Ñ–æ—Ä–º—É–ª–µ V ‚âà K ¬∑ 220 ¬∑ log2(48)
    V = K * 220.0 * log2(48.0)

    # –ó–∞–¥–∞–Ω–∏–µ 2(–≥): —á–∏—Å–ª–æ –∫–æ–º–∞–Ω–¥ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞
    P_asm = asm_commands(N)

    # –ó–∞–¥–∞–Ω–∏–µ 2(–¥): –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö) –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Å—ã
    Tk_days = calendar_time_days(P_asm, nu, m)
    Tk_hours = Tk_days * work_day_hours

    # –ó–∞–¥–∞–Ω–∏–µ 2(–µ): –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ V
    B2 = potential_errors_task2(V)

    # –ó–∞–¥–∞–Ω–∏–µ 2(–∂): –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Ç–∫–∞–∑)
    # t_k = T_k / (2 ¬∑ ln B). –ó–∞—â–∏—Ç–∏–º—Å—è –æ—Ç B <= 1 (ln <= 0).
    if B2 <= 1.0:
        t_k = float('inf')
    else:
        t_k = Tk_hours / (2.0 * math.log(B2))

    results = {
        "n2_star": n2_star,
        "V_star": V_star,
        "B1_from_Vstar_lambda": B1,
        "k_raw": k_raw,
        "k_simple": k_simple,
        "K_used": K,
        "N": N,
        "V": V,
        "P_asm": P_asm,
        "Tk_days": Tk_days,
        "Tk_hours": Tk_hours,
        "B2_from_V": B2,
        "t_k": t_k,
        "ratings": {}
    }

    # –ó–∞–¥–∞–Ω–∏–µ 3: —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ c(Œª, R)
    for coef_variant in (1, 2, 3):
        R_new, B_expected = compute_rating_and_expected_errors(data, coef_variant, data.R0)
        results["ratings"][coef_variant] = {
            "R_new": R_new,
            "B_expected_next": B_expected
        }

    return results


# =============================
# CLI
# =============================

def main():
    parser = argparse.ArgumentParser(description="–ú–µ—Ç—Ä–∏–∫–∏ –•–æ–ª—Å—Ç–µ–¥–∞ (–ó–∞–¥–∞–Ω–∏—è 1‚Äì3) –ø–æ –º–µ—Ç–æ–¥–∏—á–∫–µ.")
    parser.add_argument("-v", "--variant", type=int, default=2, choices=list(TABLE.keys()), help="–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    parser.add_argument("-m", "--programmers", type=int, default=3, help="–ß–∏—Å–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ (m)")
    parser.add_argument("-n", "--nu", type=int, default=20, help="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ŒΩ (–∫–æ–º–∞–Ω–¥ –≤ –¥–µ–Ω—å)")
    parser.add_argument("-w", "--work_hours", type=int, default=8, help="–ß–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ")
    args = parser.parse_args()

    data = TABLE[args.variant]
    results = run_all_for_variant(data, args.programmers, args.nu, args.work_hours)

    # –ó–∞–¥–∞–Ω–∏–µ 1
    print("=== –ú–ï–¢–†–ò–ö–ò –•–û–õ–°–¢–ï–î–ê ‚Äî –ó–∞–¥–∞–Ω–∏–µ 1 ===")
    print(f"V* = (2 + n2*) ¬∑ log2(2 + n2*) = {results['V_star']:.6f}")
    print(f"B1 = (V*)^2 / (3000¬∑Œª) = {results['B1_from_Vstar_lambda']:.6f}")

    # –ó–∞–¥–∞–Ω–∏–µ 2
    print("\n=== –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û ‚Äî –ó–∞–¥–∞–Ω–∏–µ 2 ===")
    print(f"k_raw = {results['k_raw']:.6f}, k_simple = {results['k_simple']}, K_used = {results['K_used']}")
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è N (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ program_length)
    print(f"N = K * (220 + 20*log2(K)) = {results['N']:.6f}")
    print(f"V ‚âà K¬∑220¬∑log2(48) = {results['V']:.6f}")
    print(f"P (–∫–æ–º–∞–Ω–¥ –∞—Å—Å–µ–º–±–ª–µ—Ä–∞) = 3¬∑N/8 = {results['P_asm']:.6f}")
    print(f"T_k (–¥–Ω–∏) = P/(ŒΩ¬∑m) = {results['Tk_days']:.6f}")
    print(f"T_k (—á–∞—Å—ã) = {results['Tk_hours']:.6f}")
    print(f"B2 = V/3000 = {results['B2_from_V']:.6f}")
    print(f"t_k = T_k/(2¬∑ln B2) (–≤ —á–∞—Å–∞—Ö) = {results['t_k']:.6f}")

    # –ó–∞–¥–∞–Ω–∏–µ 3
    print("\n=== –†–ï–ô–¢–ò–ù–ì –ò –û–ñ–ò–î–ê–ï–ú–´–ï –û–®–ò–ë–ö–ò ‚Äî –ó–∞–¥–∞–Ω–∏–µ 3 ===")
    for variant, vals in results["ratings"].items():
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞–Ω—Ç {variant}: R_new = {vals['R_new']:.6f}, B_expected_next = {vals['B_expected_next']:.6f}")


if __name__ == "__main__":
    main()
